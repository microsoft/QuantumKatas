// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

namespace Quantum.Kata.KeyDistributionE91 {

    open Microsoft.Quantum.Arrays;
    open Microsoft.Quantum.Measurement;
    open Microsoft.Quantum.Canon;
    open Microsoft.Quantum.Intrinsic;
    open Microsoft.Quantum.Diagnostics;
    open Microsoft.Quantum.Convert;
    open Microsoft.Quantum.Math;
    open Microsoft.Quantum.Random;



    //////////////////////////////////////////////////////////////////
    // Part I. Preparation
    //////////////////////////////////////////////////////////////////
	
    // Task 1.1. Entangled Pairs

    operation EntangledPairs (qsAlice : Qubit[], qsBob : Qubit[]) : Unit is Adj{
        Fact(Length(qsAlice) == Length(qsBob), "Alice and Bob should have the same number of qubits");
        // ...

    }


    //////////////////////////////////////////////////////////////////
    // Part II. E91 Protocol
    //////////////////////////////////////////////////////////////////

    // Task 2.1. Rotate and Measure
    operation RotateAndMeasure (q : Qubit, basisIndex: Int) : Result {
        // ...

        return Zero;
    }
    
    // Task 2.2. Random Bases Array
    operation RandomBasesArray (basesIndices: Int[], N: Int) : Int[] {
        // ...

        return [];
    }

    // Task 2.3 Measure Qubit Arrays
    operation MeasureQubitArray (qs: Qubit[], basesIndices: Int[]) : Result[] {
        // ...

        return [];

    }

    // Task 2.4 Generate the shared key
    function GenerateSharedKey (basesAlice: Int[], basesBob: Int[], results: Result[]) : Bool[] {
        let key = [];
        // ...

        return key;
    }

    // Task 2.5 Putting it all together 
    // Goal: Implement the entire BB84 protocol using tasks 1.1 - 2.3
    //       and following the comments in the operation template.
    // 
    // This is an open-ended task and is not covered by a test; 
    // you can run T26_BB84Protocol to run your code.
    @Test("QuantumSimulator")
    operation T25_E91Protocol () : Unit {

        // 1. Alice and Bob are distributed arrays of entangled pairs

        // 2. Alice and Bob choose random measurement bases

        // 3. Measurements by Alice and Bob

        // 4. Keys generated by Alice and Bob
        
    }


    //////////////////////////////////////////////////////////////////
    // Part III. Eavesdropping
    //////////////////////////////////////////////////////////////////

    // Task 3.1. CHSH Correlation Value
    function CorrelationValue(basesAlice: Int[], basesBob: Int[], resultsAlice: Result[], resultsBob: Result[]) : Double {
        // ...

        return 0.0;
    }

    // Task 3.2. Eavesdrop!
    operation Eavesdrop (qAlice : Qubit, qBob : Qubit, basisIndex : Int) : (Result, Result) {
        Fact(basisIndex == 2 or basisIndex == 3, "Eve should measure in one of Alice's and Bob's compatible basis");
        // ...

        return (Zero, Zero);
    }

    // Task 3.3. Catch the eavesdropper
    operation T33_E91ProtocolWithEavesdropper() : Unit {
        // 1. Alice and Bob are distributed arrays of entangled pairs
        
        // Eve eavesdrops on all qubits, guessing the basis at random

        // 2. Alice and Bob choose random measurement bases

        // 3. Measurements by Alice and Bob

        // 4. Keys generated by Alice and Bob

        // 5. Compute the CHSH correlation value

}
}